@page "/bookshelf"
@using Microsoft.AspNetCore.Authorization
@using LibraryManager.Models.Entities
@using LibraryManager.Services
@attribute [Authorize]
@inject UserBookService UserBookService
@inject NavigationManager NavigationManager
@inject ILogger<Bookshelf> Logger
@rendermode InteractiveServer

<PageTitle>My Bookshelf</PageTitle>

<div class="container mt-4">
    <h1 class="mb-5">My Bookshelf</h1>

    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row gx-4 gy-4">
            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <h3 class="card-title mb-0">Want to Read</h3>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var book in UserBooks.Where(b => b.Status == ReadingStatus.WantToRead))
                        {
                            <div class="book-item p-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h5 class="mb-1">@book.Book?.Title</h5>
                                        <p class="text-muted mb-2">by @book.Book?.Author?.Name</p>
                                        <small class="text-muted">Added: @book.StartDate.ToShortDateString()</small>
                                    </div>
                                    @if (!string.IsNullOrEmpty(book.Book?.CoverUrl))
                                    {
                                        <img src="@book.Book.CoverUrl" class="book-cover" alt="@book.Book.Title">
                                    }
                                </div>
                                <div class="mt-3">
                                    <a href="/books/@book.BookKey" class="btn btn-sm btn-outline-primary me-2">View Details</a>
                                    <button class="btn btn-sm btn-success"
                                        @onclick="() => OpenStatusChangeModal(book, ReadingStatus.CurrentlyReading)">
                                        <i class="bi bi-book"></i> Start Reading
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => OpenDeleteModal(book)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <h3 class="card-title mb-0">Currently Reading</h3>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var book in UserBooks.Where(b => b.Status == ReadingStatus.CurrentlyReading))
                        {
                            <div class="book-item p-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h5 class="mb-1">@book.Book?.Title</h5>
                                        <p class="text-muted mb-2">by @book.Book?.Author?.Name</p>
                                        <small class="text-muted">Started: @book.StartDate.ToShortDateString()</small>
                                    </div>
                                    @if (!string.IsNullOrEmpty(book.Book?.CoverUrl))
                                    {
                                        <img src="@book.Book.CoverUrl" class="book-cover" alt="@book.Book.Title">
                                    }
                                </div>
                                <div class="mt-3">
                                    <a href="/books/@book.BookKey" class="btn btn-sm btn-outline-primary me-2">View Details</a>
                                    <button class="btn btn-sm btn-success"
                                        @onclick="() => OpenStatusChangeModal(book, ReadingStatus.Completed)">
                                        <i class="bi bi-check-circle"></i> Mark as Completed
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => OpenDeleteModal(book)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <h3 class="card-title mb-0">Completed</h3>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var book in UserBooks.Where(b => b.Status == ReadingStatus.Completed))
                        {
                            <div class="book-item p-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h5 class="mb-1">@book.Book?.Title</h5>
                                        <p class="text-muted mb-2">by @book.Book?.Author?.Name</p>
                                        <small class="text-muted">Completed: @book.EndDate?.ToShortDateString()</small>
                                    </div>
                                    @if (!string.IsNullOrEmpty(book.Book?.CoverUrl))
                                    {
                                        <img src="@book.Book.CoverUrl" class="book-cover" alt="@book.Book.Title">
                                    }
                                </div>
                                <div class="mt-3">
                                    <a href="/books/@book.BookKey" class="btn btn-sm btn-outline-primary me-2">View Details</a>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="() => OpenStatusChangeModal(book, ReadingStatus.CurrentlyReading)">
                                        <i class="bi bi-arrow-repeat"></i> Read Again
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => OpenDeleteModal(book)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (IsStatusChangeModalOpen)
{
    <div class="modal show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Book Status</h5>
                    <button type="button" class="btn-close" @onclick="CloseStatusChangeModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to change the status of "@SelectedBook?.Book?.Title" to
                        @GetStatusDisplayName(NewStatus)?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseStatusChangeModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateBookStatus">Confirm</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (IsDeleteModalOpen)
{
    <div class="modal show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Remove Book</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove "@SelectedBook?.Book?.Title" from your bookshelf?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="RemoveBook">Remove</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<style>
    .book-item {
        transition: background-color 0.2s;
    }

    .book-item:hover {
        background-color: #f8f9fa;
    }

    .book-cover {
        width: 60px;
        height: 90px;
        object-fit: cover;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card {
        border: none;
        border-radius: 8px;
    }

    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, .125);
        border-radius: 8px 8px 0 0 !important;
    }
</style>

@code {
    private List<UserBook> UserBooks { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool IsStatusChangeModalOpen { get; set; }
    private bool IsDeleteModalOpen { get; set; }
    private UserBook? SelectedBook { get; set; }
    private ReadingStatus NewStatus { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserBooks();
    }

    private async Task LoadUserBooks()
    {
        IsLoading = true;
        UserBooks = await UserBookService.GetUserBooksAsync();
        IsLoading = false;
    }

    private void OpenStatusChangeModal(UserBook book, ReadingStatus newStatus)
    {
        SelectedBook = book;
        NewStatus = newStatus;
        IsStatusChangeModalOpen = true;
    }

    private void CloseStatusChangeModal()
    {
        IsStatusChangeModalOpen = false;
        SelectedBook = null;
    }

    private async Task UpdateBookStatus()
    {
        if (SelectedBook != null)
        {
            await UserBookService.UpdateUserBookStatusAsync(SelectedBook.Id, NewStatus);
            await LoadUserBooks();
            CloseStatusChangeModal();
        }
    }

    private string GetStatusDisplayName(ReadingStatus status) => status switch
    {
        ReadingStatus.WantToRead => "Want to Read",
        ReadingStatus.CurrentlyReading => "Currently Reading",
        ReadingStatus.Completed => "Completed",
        _ => status.ToString()
    };

    private void OpenDeleteModal(UserBook book)
    {
        SelectedBook = book;
        IsDeleteModalOpen = true;
    }

    private void CloseDeleteModal()
    {
        IsDeleteModalOpen = false;
        SelectedBook = null;
    }

    private async Task RemoveBook()
    {
        if (SelectedBook != null)
        {
            await UserBookService.DeleteUserBookAsync(SelectedBook.Id);
            await LoadUserBooks();
            CloseDeleteModal();
        }
    }
}