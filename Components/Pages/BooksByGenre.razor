@page "/books/genre/{Genre}"
@using Microsoft.AspNetCore.Authorization
@using LibraryManager.Models.Entities
@using LibraryManager.Services
@using System.Web
@attribute [Authorize]
@inject BookService BookService
@inject BookCacheService BookCacheService
@inject NavigationManager NavigationManager

<PageTitle>@CapitalizeFirstLetter(Genre) Books</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@CapitalizeFirstLetter(Genre) Books</h1>
        <a href="/home" class="btn btn-outline-primary">Back to Home</a>
    </div>

    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (Books.Count == 0)
    {
        <div class="alert alert-info">
            No books found for this genre.
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var book in Books)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(book.CoverUrl))
                        {
                            <img src="@book.CoverUrl" class="card-img-top" alt="@book.Title">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@book.Author</h6>
                            <p class="card-text">@book.Description</p>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (TotalPages > 1)
        {
            <nav aria-label="Page navigation" class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="#" @onclick="() => ChangePage(CurrentPage - 1)">Previous</a>
                    </li>
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        <li class="page-item @(i == CurrentPage ? "active" : "")">
                            <a class="page-link" href="#" @onclick="() => ChangePage(i)">@i</a>
                        </li>
                    }
                    <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                        <a class="page-link" href="#" @onclick="() => ChangePage(CurrentPage + 1)">Next</a>
                    </li>
                </ul>
            </nav>
        }
    }
</div>

<style>
    .card {
        transition: transform 0.2s, box-shadow 0.2s;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .card-img-top {
        height: 300px;
        object-fit: cover;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .card-body {
        padding: 1.25rem;
    }

    .card-title {
        font-weight: 600;
        color: #2c3e50;
    }

    .card-subtitle {
        font-size: 0.9rem;
    }

    .card-text {
        color: #666;
        font-size: 0.9rem;
    }

    .page-link {
        color: #3498db;
    }

    .page-item.active .page-link {
        background-color: #3498db;
        border-color: #3498db;
    }
</style>

@code {
    [Parameter]
    [EditorRequired]
    public string Genre { get; set; } = string.Empty;

    private List<Book> Books { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private int CurrentPage { get; set; } = 1;
    private const int PageSize = 9;
    private int TotalPages { get; set; }
    private List<Book> AllBooks { get; set; } = new();

    private string CapitalizeFirstLetter(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;
        return char.ToUpper(text[0]) + text.Substring(1);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        IsLoading = true;
        var decodedGenre = HttpUtility.UrlDecode(Genre);

        if (BookCacheService.TryGetBooks(decodedGenre, out var cachedBooks))
        {
            AllBooks = cachedBooks;
        }
        else
        {
            AllBooks = await BookService.GetBooksBySubjectAsync(decodedGenre);
            BookCacheService.CacheBooks(decodedGenre, AllBooks);
        }

        TotalPages = (int)Math.Ceiling(AllBooks.Count / (double)PageSize);
        Books = AllBooks.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        IsLoading = false;
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            IsLoading = true;
            Books = AllBooks.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            IsLoading = false;
        }
    }
}