@page "/home"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using LibraryManager.Models.Entities
@using LibraryManager.Services
@using System.Web
@attribute [Authorize]
@attribute [StreamRendering]
@inject BookService BookService
@inject BookCacheService BookCacheService
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <div class="welcome-section">
        <h1>Welcome, @UserEmail!</h1>
        <p class="lead">Discover your next favorite book from our recommendations.</p>
    </div>

    <h1 class="mb-4">Book Recommendations</h1>

    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        @foreach (var genre in BookRecommendations.Keys)
        {
            <div class="genre-section mb-5">
                <div class="genre-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h2 class="genre-title">@CapitalizeFirstLetter(genre)</h2>
                        <a href="/books/genre/@HttpUtility.UrlEncode(genre)" class="btn btn-outline-primary">See More</a>
                    </div>
                </div>
                <div class="row">
                    @foreach (var book in BookRecommendations[genre])
                    {
                        <div class="col-md-4 mb-4">
                            <div class="card h-100">
                                <a href="/books/@book.Key" class="text-decoration-none text-dark">
                                    @if (!string.IsNullOrEmpty(book.CoverUrl))
                                    {
                                        <img src="@book.CoverUrl" class="card-img-top" alt="@book.Title">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@book.Title</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">@book.Author.Name</h6>
                                    </div>
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

<style>
    .welcome-section {
        text-align: center;
        margin-bottom: 3rem;
        padding: 2rem;
        background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
        color: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .welcome-section h1 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }

    .welcome-section .lead {
        font-size: 1.25rem;
        opacity: 0.9;
    }

    .genre-section {
        padding: 1.5rem;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .genre-header {
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .genre-title {
        font-weight: bold;
        color: #2c3e50;
        margin: 0;
    }

    .card {
        transition: transform 0.2s, box-shadow 0.2s;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .card-img-top {
        height: 300px;
        object-fit: cover;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .card-body {
        padding: 1.25rem;
    }

    .card-title {
        font-weight: 600;
        color: #2c3e50;
    }

    .card-subtitle {
        font-size: 0.9rem;
    }

    .card-text {
        color: #666;
        font-size: 0.9rem;
    }
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string UserEmail { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = true;
    private Dictionary<string, List<Book>> BookRecommendations { get; set; } = new();

    private string CapitalizeFirstLetter(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;
        return char.ToUpper(text[0]) + text.Substring(1);
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            UserEmail = authState?.User?.Identity?.Name ?? "User";
        }

        var popularGenres = new[] { "fiction", "mystery", "science fiction", "romance", "fantasy" };
        foreach (var genre in popularGenres)
        {
            if (BookCacheService.TryGetBooks(genre, out var cachedBooks))
            {
                BookRecommendations[genre] = (cachedBooks ?? new List<Book>()).Take(6).ToList();
            }
            else
            {
                var books = await BookService.GetBooksBySubjectAsync(genre, limit: 6);
                BookRecommendations[genre] = books ?? new List<Book>();
                BookCacheService.CacheBooks(genre, BookRecommendations[genre]);
            }
        }

        IsLoading = false;
    }
}
