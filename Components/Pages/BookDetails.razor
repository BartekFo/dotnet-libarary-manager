@page "/books/{BookKey}"
@using Microsoft.AspNetCore.Authorization
@using LibraryManager.Models.Entities
@using LibraryManager.Services
@using System.Web
@attribute [Authorize]
@inject BookService BookService
@inject NavigationManager NavigationManager

<PageTitle>@(Book?.Title ?? "Book Details")</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <a href="javascript:history.back()" class="btn btn-outline-primary">Back</a>
    </div>

    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (Book == null)
    {
        <div class="alert alert-danger">
            Book not found.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                @if (!string.IsNullOrEmpty(Book.CoverUrl))
                {
                    <img src="@Book.CoverUrl" class="img-fluid rounded shadow" alt="@Book.Title">
                }
                else
                {
                    <div class="no-cover-placeholder">
                        <i class="fas fa-book fa-5x"></i>
                        <p>No cover available</p>
                    </div>
                }
            </div>
            <div class="col-md-8">
                <h1 class="mb-3">@Book.Title</h1>
                <h4 class="text-muted mb-4">by @Book.Author.Name</h4>


                <div class="book-details mb-4">
                    <h5>Reading Counts</h5>
                    <p><strong>Want to read:</strong> @Book.ReadingCounts.Counts.Want_to_read</p>
                    <p><strong>Currently reading</strong> @Book.ReadingCounts.Counts.Currently_reading</p>
                    <p><strong>Already read</strong> @Book.ReadingCounts.Counts.Already_read</p>
                </div>

                <div class="book-details mb-4">
                    <h5>Ratings</h5>
                    <p><strong>Average:</strong> @Book.Ratings.Summary.Average ⭐</p>
                    <p><strong>Count:</strong> @Book.Ratings.Summary.Count</p>
                    <div class="rating-bars">
                        <div class="rating-bar">
                            <span>⭐⭐⭐⭐⭐</span>
                            <span>@Book.Ratings.Counts.Five</span>
                        </div>
                        <div class="rating-bar">
                            <span>⭐⭐⭐⭐</span>
                            <span>@Book.Ratings.Counts.Four</span>
                        </div>
                        <div class="rating-bar">
                            <span>⭐⭐⭐</span>
                            <span>@Book.Ratings.Counts.Three</span>
                        </div>
                        <div class="rating-bar">
                            <span>⭐⭐</span>
                            <span>@Book.Ratings.Counts.Two</span>
                        </div>
                        <div class="rating-bar">
                            <span>⭐</span>
                            <span>@Book.Ratings.Counts.One</span>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    }
</div>

<style>
    .no-cover-placeholder {
        height: 400px;
        background-color: #f8f9fa;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        color: #6c757d;
    }

    .book-details p {
        margin-bottom: 0.5rem;
    }

    .badge {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
    }

    .rating-bars {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        width: 200px;
    }

    .rating-bar {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .rating-bar span:first-child {
        width: 120px;
    }

    .rating-bar span:last-child {
        width: 40px;
        text-align: right;
    }
</style>

@code {
    [Parameter]
    [EditorRequired]
    public string BookKey { get; set; } = string.Empty;

    private Book? Book { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookDetails();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadBookDetails();
    }

    private async Task LoadBookDetails()
    {
        IsLoading = true;
        Book = await BookService.GetBookDetailsAsync(BookKey);
        IsLoading = false;
    }
}